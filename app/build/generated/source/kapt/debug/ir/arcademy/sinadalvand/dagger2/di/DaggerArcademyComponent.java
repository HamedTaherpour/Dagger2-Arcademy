// Generated by Dagger (https://dagger.dev).
package ir.arcademy.sinadalvand.dagger2.di;

import android.content.Context;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import ir.arcademy.sinadalvand.dagger2.ArcademyApplication;
import ir.arcademy.sinadalvand.dagger2.MainActivity;
import ir.arcademy.sinadalvand.dagger2.MainActivity_MembersInjector;
import ir.arcademy.sinadalvand.dagger2.SafePref;
import ir.arcademy.sinadalvand.dagger2.SecondActivity;
import ir.arcademy.sinadalvand.dagger2.SecondActivity_MembersInjector;
import ir.arcademy.sinadalvand.dagger2.Zcript;
import ir.arcademy.sinadalvand.dagger2.Zsecure;
import ir.arcademy.sinadalvand.dagger2.di.module.ActivityModule_ProvideMainAcitivty;
import ir.arcademy.sinadalvand.dagger2.di.module.ActivityModule_ProvideSecondActivity;
import ir.arcademy.sinadalvand.dagger2.di.module.SafePrefModule;
import ir.arcademy.sinadalvand.dagger2.di.module.SafePrefModule_GetSafePref1Factory;
import ir.arcademy.sinadalvand.dagger2.di.module.TempModule1;
import ir.arcademy.sinadalvand.dagger2.di.module.TempModule1_ProvideZsecureFactory;
import ir.arcademy.sinadalvand.dagger2.di.module.TempModule2;
import ir.arcademy.sinadalvand.dagger2.di.module.TempModule2_ProvideZsecureFactory;
import ir.arcademy.sinadalvand.dagger2.di.module.ZcriptModule;
import ir.arcademy.sinadalvand.dagger2.di.module.ZcriptModule_GetZcript1Factory;
import ir.arcademy.sinadalvand.dagger2.di.module.ZsecureModule;
import ir.arcademy.sinadalvand.dagger2.di.module.ZsecureModule_GetZsecureFactory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerArcademyComponent implements ArcademyComponent {
  private final TempModule1 tempModule1;

  private final TempModule2 tempModule2;

  private Provider<ActivityModule_ProvideMainAcitivty.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_ProvideSecondActivity.SecondActivitySubcomponent.Factory> secondActivitySubcomponentFactoryProvider;

  private Provider<Context> contextProvider;

  private Provider<Zsecure> getZsecureProvider;

  private Provider<Zcript> getZcript1Provider;

  private DaggerArcademyComponent(ZcriptModule zcriptModuleParam, ZsecureModule zsecureModuleParam,
      TempModule1 tempModule1Param, TempModule2 tempModule2Param, Context contextParam) {
    this.tempModule1 = tempModule1Param;
    this.tempModule2 = tempModule2Param;
    initialize(zcriptModuleParam, zsecureModuleParam, tempModule1Param, tempModule2Param, contextParam);
  }

  public static ArcademyComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SecondActivity.class, (Provider) secondActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final ZcriptModule zcriptModuleParam,
      final ZsecureModule zsecureModuleParam, final TempModule1 tempModule1Param,
      final TempModule2 tempModule2Param, final Context contextParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ProvideMainAcitivty.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ProvideMainAcitivty.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.secondActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ProvideSecondActivity.SecondActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ProvideSecondActivity.SecondActivitySubcomponent.Factory get() {
        return new SecondActivitySubcomponentFactory();}
    };
    this.contextProvider = InstanceFactory.create(contextParam);
    this.getZsecureProvider = ZsecureModule_GetZsecureFactory.create(zsecureModuleParam);
    this.getZcript1Provider = DoubleCheck.provider(ZcriptModule_GetZcript1Factory.create(zcriptModuleParam, getZsecureProvider));
  }

  @Override
  public void inject(ArcademyApplication arg0) {
    injectArcademyApplication(arg0);}

  private ArcademyApplication injectArcademyApplication(ArcademyApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements ArcademyComponent.Factory {
    @Override
    public ArcademyComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new DaggerArcademyComponent(new ZcriptModule(), new ZsecureModule(), new TempModule1(), new TempModule2(), context);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityModule_ProvideMainAcitivty.MainActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ProvideMainAcitivty.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(new SafePrefModule(), arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityModule_ProvideMainAcitivty.MainActivitySubcomponent {
    private Provider<SafePref> getSafePref1Provider;

    private MainActivitySubcomponentImpl(SafePrefModule safePrefModuleParam, MainActivity arg0) {

      initialize(safePrefModuleParam, arg0);
    }

    private Map<String, Zsecure> getMapOfStringAndZsecure() {
      return MapBuilder.<String, Zsecure>newMapBuilder(2).put("zsc1", TempModule1_ProvideZsecureFactory.provideZsecure(DaggerArcademyComponent.this.tempModule1)).put("zsc2", TempModule2_ProvideZsecureFactory.provideZsecure(DaggerArcademyComponent.this.tempModule2)).build();}

    @SuppressWarnings("unchecked")
    private void initialize(final SafePrefModule safePrefModuleParam, final MainActivity arg0) {
      this.getSafePref1Provider = DoubleCheck.provider(SafePrefModule_GetSafePref1Factory.create(safePrefModuleParam, DaggerArcademyComponent.this.contextProvider, DaggerArcademyComponent.this.getZcript1Provider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectAutoSafePref(instance, getSafePref1Provider.get());
      MainActivity_MembersInjector.injectAutoSafePref2(instance, getSafePref1Provider.get());
      MainActivity_MembersInjector.injectZcript(instance, DaggerArcademyComponent.this.getZcript1Provider.get());
      MainActivity_MembersInjector.injectZsecures(instance, getMapOfStringAndZsecure());
      return instance;
    }
  }

  private final class SecondActivitySubcomponentFactory implements ActivityModule_ProvideSecondActivity.SecondActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ProvideSecondActivity.SecondActivitySubcomponent create(
        SecondActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SecondActivitySubcomponentImpl(new SafePrefModule(), arg0);
    }
  }

  private final class SecondActivitySubcomponentImpl implements ActivityModule_ProvideSecondActivity.SecondActivitySubcomponent {
    private Provider<SafePref> getSafePref1Provider;

    private SecondActivitySubcomponentImpl(SafePrefModule safePrefModuleParam,
        SecondActivity arg0) {

      initialize(safePrefModuleParam, arg0);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SafePrefModule safePrefModuleParam, final SecondActivity arg0) {
      this.getSafePref1Provider = DoubleCheck.provider(SafePrefModule_GetSafePref1Factory.create(safePrefModuleParam, DaggerArcademyComponent.this.contextProvider, DaggerArcademyComponent.this.getZcript1Provider));
    }

    @Override
    public void inject(SecondActivity arg0) {
      injectSecondActivity(arg0);}

    private SecondActivity injectSecondActivity(SecondActivity instance) {
      SecondActivity_MembersInjector.injectAutoSafePref(instance, getSafePref1Provider.get());
      SecondActivity_MembersInjector.injectAutoSafePref2(instance, getSafePref1Provider.get());
      SecondActivity_MembersInjector.injectZcript(instance, DaggerArcademyComponent.this.getZcript1Provider.get());
      return instance;
    }
  }
}
